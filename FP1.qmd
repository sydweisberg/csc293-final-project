---
title: "FP1"
format: pdf
editor: visual
---

```{r, warning=FALSE, message=FALSE}
# reading in csvs and creating df
library(tidyverse)

stardew_all <- read.csv("stardew_all.csv") |> select(!Timestamp) |> mutate(from = "All")
stardew_smith <- read.csv("stardew_smith.csv") |> select(!Timestamp) |> mutate(from = "Smith")

stardew_data <- rbind(stardew_all, stardew_smith)
```

```{r}
# separating the data into train and test data
set.seed(1) # set seed

indices <- sample(seq(118), 82) # find 82 random indices

train <- stardew_data[indices,] # use those 100 indices for training data

test_data <- stardew_data[-indices,] # use all the other ones for testing
test_marriage <- stardew_data$marriage_candidate[-indices] # get true marraige candidates for testing
```

```{r}
# Sydney's Best Subsets
library(MASS)

stardew <- stardew_data |>
  select(!from)

model <- polr(factor(marriage_candidate) ~ ., data = stardew)

selected_model <- suppressWarnings(stepAIC(model, ~ . ^ 2))
```

```{r}
selected_model
```


```{r}
# Emma's KNN
# predicts right 25%, so not ideal
library(class)
X <- model.matrix(~ sexuality + non_marriage_candidate + gender + from - 1, data = stardew_data)

X <- cbind(X, playtime = as.numeric(stardew_data$playtime))

train.X <- X[indices, ]
test.X <- X[-indices, ]
train_marriage <- stardew_data$marriage_candidate[indices]
set.seed(1)
knn.pred <- knn(train.X, test.X, train_marriage, k = 7)
table(knn.pred, test_marriage)
mean(knn.pred == test_marriage)
```

```{r}
# Caroline's Decision Tree (predicts 19.4%)
library(party)

train_data <- stardew_data[indices, ]
test_data <- stardew_data[-indices, ]

#converting characters to factor
stardew_data[] <- lapply(stardew_data, function(x) {
  if (is.character(x)) factor(x) else x
})

marriage <- ctree(marriage_candidate ~ from + personality, data = train_data)
predictions <- predict(marriage, newdata = test_data)

table(predictions, test_marriage)
mean(predictions == test_marriage)

```

```{r}
# Molly's QDA - predicts 16.7% with playtime as predictor and 19.4% with age as predictor
library(MASS)
#because maru only has one observation, there is no way to train the model how to predict it. therefore, we drop the maru factor from our data
maru_omitted <- train |>
  filter(as.character(marriage_candidate) != "Maru")
maru_omitted$marriage_candidate <- droplevels(maru_omitted$marriage_candidate)

#fitting the qda model

#since we can't compute covariance matrices with categorical data and we have so little observations in each group of our training data, we have to use our 2 numeric variables for the models
qda.fit.playtime <- qda(marriage_candidate ~ playtime, data = maru_omitted)
qda.fit.age <- qda(marriage_candidate ~ age, data = maru_omitted)

#making our predictions
qda.playtime.pred <- predict(qda.fit.playtime, test_data)$class
qda.age.pred <- predict(qda.fit.age, test_data)$class

table(qda.playtime.pred, test_data$marriage_candidate)
table(qda.age.pred, test_data$marriage_candidate)

#have to switch them to characters cause R doesn't like comparing factors
mean(as.character(qda.playtime.pred) == as.character(test_data$marriage_candidate))
mean(as.character(qda.age.pred) == as.character(test_data$marriage_candidate))

```
