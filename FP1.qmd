---
title: "FP1"
format: pdf
editor: visual
---

```{r, warning=FALSE, message=FALSE}
# reading in csvs and creating df
library(tidyverse)

stardew_all <- read.csv("stardew_all.csv") |> select(!Timestamp) |> mutate(from = "All")
stardew_smith <- read.csv("stardew_smith.csv") |> select(!Timestamp) |> mutate(from = "Smith")

stardew_data <- rbind(stardew_all, stardew_smith)
```

```{r}
# separating the data into train and test data
set.seed(1) # set seed

indices <- sample(seq(155), 108) # find 108 random indices

train <- stardew_data[indices,] # use those indices for training data

test_data <- stardew_data[-indices,] # use all the other ones for testing
test_marriage <- stardew_data$marriage_candidate[-indices] # get true marriage candidates for testing
```

```{r}
# Sydney's Best Subsets
library(MASS)

stardew <- dplyr::select(stardew_data, -from)

model <- polr(factor(marriage_candidate) ~ ., data = stardew)

selected_model <- suppressWarnings(stepAIC(model, ~ . ^ 2))
```

```{r}
selected_model
```

```{r}
# Emma's KNN
# predicts right 25%, so not ideal
library(class)
X <- model.matrix(~ sexuality + non_marriage_candidate + gender + from - 1, data = stardew_data)

X <- cbind(X, playtime = as.numeric(stardew_data$playtime))

train.X <- X[indices, ]
test.X <- X[-indices, ]
train_marriage <- stardew_data$marriage_candidate[indices]
set.seed(1)
knn.pred <- knn(train.X, test.X, train_marriage, k = 7)
table(knn.pred, test_marriage)
mean(knn.pred == test_marriage)
```

```{r}
# Caroline's Decision Tree (predicts 19.4%)
library(party)

train_data <- stardew_data[indices, ]
test_data <- stardew_data[-indices, ]

#converting characters to factor
stardew_data[] <- lapply(stardew_data, function(x) {
  if (is.character(x)) factor(x) else x
})

marriage <- ctree(marriage_candidate ~ from + personality, data = train_data)
predictions <- predict(marriage, newdata = test_data)

table(predictions, test_marriage)
mean(predictions == test_marriage)

```

```{r}
# Molly's QDA - predicts 14.9% with playtime as predictor and 21.3% with age as predictor
library(MASS)

#fitting the qda model

#since we can't compute covariance matrices with categorical data and we have so little observations in each group of our training data, we have to use our 2 numeric variables for the models
qda.fit.playtime <- qda(marriage_candidate ~ playtime, data = stardew_data)
qda.fit.age <- qda(marriage_candidate ~ age, data = stardew_data)
qda.fit.both <- qda(marriage_candidate ~ age + playtime, data = stardew_data)

#making our predictions
qda.playtime.pred <- predict(qda.fit.playtime, test_data)$class
qda.age.pred <- predict(qda.fit.age, test_data)$class
qda.both.pred <- predict(qda.fit.both, test_data)$class


table(qda.playtime.pred, test_data$marriage_candidate)
table(qda.age.pred, test_data$marriage_candidate)

#have to switch them to characters cause R doesn't like comparing factors
mean(as.character(qda.playtime.pred) == as.character(test_data$marriage_candidate))
mean(as.character(qda.age.pred) == as.character(test_data$marriage_candidate))
mean(as.character(qda.both.pred) == as.character(test_data$marriage_candidate))

```

```{r}
# Syd's Multinomial Logistic Regression
# 21.21% accurate
library(nnet)

no_from_train <- dplyr::select(train_data, -from)
no_from_test <- dplyr::select(test_data, -from)
no_from_test <- dplyr::filter(no_from_test, !(non_marriage_candidate %in% c("Dwarf", "Vincent")))

logistic_model <- multinom(factor(marriage_candidate) ~ gender + sexuality + relationship + hobbies + activity + season + 
    playtime + non_marriage_candidate, data = no_from_train)

predicted_classes <- predict(logistic_model, newdata = no_from_test)

confusion_matrix <- table(Predicted = predicted_classes, Actual = no_from_test$marriage_candidate)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
accuracy_percent <- accuracy * 100
print(paste("Accuracy:", round(accuracy_percent, 2), "%"))
```

```{r}
# Syd's Multinomial Logistic Regression Function
predict_marriage_candidate <- function(Gender, Sexuality, Relationship, Hobbies, Activity, Season, Playtime, Non_marriage_candidate) {
new_data <- data.frame(gender = Gender,
                       sexuality = Sexuality,
                       relationship = Relationship,
                       hobbies = Hobbies,
                       activity = Activity,
                       season = Season,
                       playtime = Playtime,
                       non_marriage_candidate = Non_marriage_candidate)



  prediction <- predict(logistic_model, newdata = new_data, type = "class")
  return(prediction)
}
```

```{r}
# Change up the parameters to make a prediction!
predict_marriage_candidate("Female", "Lesbian", "Single", "Cooking", "Fishing", "Summer", 2, "Robin")
```
